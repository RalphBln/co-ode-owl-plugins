/**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  MULTI=true;
  VISITOR=true;
  NODE_PREFIX="OPPLTest";
}
 
PARSER_BEGIN(OPPLTestParser) 
package org.coode.oppl.test;

import java.io.Reader;
import java.net.URI;
import java.util.HashSet;
import java.util.Set;

import org.coode.oppl.syntax.OPPLParser;
import org.coode.oppl.syntax.OPPLStart;
import org.coode.oppl.utils.ParserFactory;
import org.coode.oppl.variablemansyntax.ConstraintSystem;
import org.coode.oppl.variablemansyntax.VariableManchesterOWLSyntaxParser;
import org.semanticweb.owl.expression.ShortFormEntityChecker;
import org.semanticweb.owl.inference.OWLReasoner;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.model.OWLOntologyManager;
import org.semanticweb.owl.util.BidirectionalShortFormProvider;
import org.semanticweb.owl.util.BidirectionalShortFormProviderAdapter;
import org.semanticweb.owl.util.SimpleShortFormProvider;
import org.semanticweb.owl.model.OWLOntology;

public class OPPLTestParser {
	
	private static OWLOntologyManager owlOntologyManager;
	private static ConstraintSystem constraintSystem;
	private static OWLReasoner reasoner;
	
	public static OWLReasoner getReasoner(){
		return reasoner;	
	}
	
	
	public static ConstraintSystem getConstraintSystem(){
		return constraintSystem;
	}
	
	public static  OWLDataFactory getOWLDataFactory(){
		return owlOntologyManager.getOWLDataFactory();
	}
	
	public static OWLOntologyManager getOWLOntologyManager(){
		return owlOntologyManager;
	}

	public OPPLTestParser(java.io.InputStream in, OWLOntologyManager owlOntologyManager, ConstraintSystem constraintSystem){
		this(in);
		OPPLTestParser.owlOntologyManager = owlOntologyManager;
		OPPLTestParser.constraintSystem = constraintSystem;
	} 

	public OPPLTestParser(java.io.InputStream in, OWLOntologyManager owlOntologyManager, ConstraintSystem constraintSystem, OWLReasoner reasoner){
		this(in, owlOntologyManager, constraintSystem);		
		OPPLTestParser.reasoner = reasoner;
	}
   
   	public static void ReInit(OWLOntology ontology,Reader reader,
			OWLOntologyManager ontologyManager, ConstraintSystem cs) {
		ReInit(reader);
		owlOntologyManager = ontologyManager;
		constraintSystem = cs;
	}

   	public static void ReInit(OWLOntology ontology,Reader reader,
			OWLOntologyManager ontologyManager, ConstraintSystem cs, OWLReasoner reasoner) {
		ReInit(ontology,reader,ontologyManager,cs);
		OPPLTestParser.reasoner = reasoner;
	}
   
   	public OPPLTestParser(Reader reader, OWLOntologyManager ontologyManager,
			ConstraintSystem cs) {
		this(reader);
		owlOntologyManager = ontologyManager;
		constraintSystem = cs;
	} 	
	
	public OPPLTestParser(Reader reader, OWLOntologyManager ontologyManager,
			ConstraintSystem cs, OWLReasoner reasoner) {
		this(reader,ontologyManager,cs);
		OPPLTestParser.reasoner = reasoner;
	} 
	
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression: ");
    new OPPLTestParser(System.in);
    try {
      SimpleNode n = OPPLTestParser.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(OPPLTestParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN: /*INFERENCE*/
{
	<INFERENCE: "INFERENCE">
	|<ON :"ON">
	|<OFF:"OFF">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}

TOKEN : /*PUNCTUATION*/
{
	
	 <COMMA: ",">
	| <SEMICOLON: ";">
	| <QUESTION: "?">
	
}

TOKEN: /* URI SYMBOLS*/
{
	<SHARP: "#">
	| <COLON: ":">
	| <FWDSLASH: "/">
	| <DOT: ".">
}

TOKEN: /* VARIABLE NAMES*/
{
	<VARIABLENAME: <QUESTION><IDENTIFIER>>
}

SimpleNode Start():{boolean inference;URI uri;OPPLStart statement;Set<OWLAxiom> axioms;}
{
   inference = inference(){
   		jjtThis.setInferenceOn(inference); 
   }
   <SEMICOLON> uri = ontologyURI()<SEMICOLON>{
   		jjtThis.setOWLOntology(OPPLTestParser.getOWLOntologyManager().loadOntologyFromPhysicalURI(uri));
   } statement = query() <SEMICOLON>{
   		jjtThis.setStatement(statement);
   }
    (axioms = affectedAxioms(){
    	jjtThis.setAffectedAxioms(axioms);
    })?
  { return jjtThis; }
}

Set<OWLAxiom> affectedAxioms() #void :{Set<OWLAxiom> axioms=new HashSet<OWLAxiom>(); OWLAxiom axiom;}
{
	axiom = affectedAxiom(){
		axioms.add(axiom);
	}
	(<COMMA> axiom = affectedAxiom(){
		axioms.add(axiom);
	}
	)*
	{
		return axioms;
	}
}

boolean inference() #void :{boolean toReturn = false;}
{
	<INFERENCE>"="(<ON>{
		OPPLTestParser.getConstraintSystem().setReasoner(OPPLTestParser.reasoner);
		toReturn=true;
	}
	| <OFF>{
		toReturn = false;
	}){
		return toReturn;
	}
}

JAVACODE
URI ontologyURI(){
	String string="";
	Token t;
	while(true){
		t = getToken(1);
		if (t.kind==SEMICOLON || t.kind == EOF){
			break;
		}else{
			string += t.image;
			t = getNextToken();
		}
	}
	return URI.create(string);
}

JAVACODE
OPPLStart query(){
	String string="";
	Token t;
	while(true){
		t = getToken(1);
		if (t.kind==SEMICOLON  || t.kind == EOF){
			break;
		}else{
			string += t.image+" ";
			t = getNextToken();
		}
	}
	string+=";";
	ParserFactory.initParser(string,constraintSystem.getOntology(), OPPLTestParser.getOWLOntologyManager());
	try{
		OPPLStart toReturn = (OPPLStart)OPPLParser.Start();
		return toReturn;
	} catch (Exception e) {
		throw new ParseException(e.getMessage());
	}
	 
	
}

JAVACODE
OWLAxiom affectedAxiom(){
	String string="";
	Token t;
	
	while(true){
		t = getToken(1);
		if (t.kind==COMMA  || t.kind == EOF){
			break;
		}else{
			string += t.image+ " ";
			t = getNextToken();
		}
	}
	VariableManchesterOWLSyntaxParser parser = new VariableManchesterOWLSyntaxParser(OPPLTestParser.getOWLDataFactory(),string,OPPLTestParser.getConstraintSystem());
	BidirectionalShortFormProvider bshp = new BidirectionalShortFormProviderAdapter(
					OPPLTestParser.getOWLOntologyManager().getOntologies(),
					new SimpleShortFormProvider());
	parser.setOWLEntityChecker(new ShortFormEntityChecker(bshp));
	try{
		OWLAxiom toReturn = parser.parseAxiom();
		return toReturn;
	}catch(Exception e){
		throw new ParseException(e.getMessage());
	} 
	
	
}
