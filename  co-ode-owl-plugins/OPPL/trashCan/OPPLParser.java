/* Generated By:JJTree&JavaCC: Do not edit this line. OPPLParser.java */
package org.coode.oppl.syntax;
import org.coode.oppl.variablemansyntax.Variable;
import org.coode.oppl.variablemansyntax.VariableType;
import org.coode.oppl.variablemansyntax.VariableImpl;
import org.coode.oppl.variablemansyntax.VariableScopes.Direction;
import org.coode.oppl.variablemansyntax.generated.*;
import org.coode.oppl.OPPLAbstractFactory;
import org.coode.oppl.OPPLFactory;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLDataProperty;
import org.semanticweb.owl.model.OWLObject;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.model.OWLObjectProperty;
import org.coode.oppl.variablemansyntax.ConstraintSystem;
import org.semanticweb.owl.util.BidirectionalShortFormProvider;
import org.semanticweb.owl.util.BidirectionalShortFormProviderAdapter;
import org.semanticweb.owl.util.SimpleShortFormProvider;
import org.coode.oppl.variablemansyntax.VariableManchesterSyntaxExpressionChecker;
import org.semanticweb.owl.inference.OWLReasoner;
import org.semanticweb.owl.util.ReferencedEntitySetProvider;
import org.protege.editor.owl.ui.clsdescriptioneditor.AutoCompleterMatcher;

import org.semanticweb.owl.model.OWLOntologyManager;
import java.util.ArrayList;
import java.util.*;
import org.semanticweb.owl.expression.ParserException;
import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.model.OWLOntology;
import java.net.URI;
import java.io.Reader;
import org.semanticweb.owl.model.OWLDescription;
import org.semanticweb.owl.model.OWLDataPropertyExpression;
import org.coode.oppl.variablemansyntax.ExpressionParser;
import org.coode.oppl.variablemansyntax.VariableShortFormEntityChecker;
import org.coode.oppl.variablemansyntax.VariableManchesterOWLSyntaxParser;
import org.coode.manchesterowlsyntax.ManchesterOWLSyntaxEditorParser;
import org.coode.oppl.variablemansyntax.VariableScope;
import org.coode.oppl.variablemansyntax.VariableScopes;
import org.coode.oppl.OPPLException;
import org.coode.oppl.utils.*;

public @SuppressWarnings("all") class OPPLParser/*@bgen(jjtree)*/implements OPPLParserTreeConstants, OPPLParserConstants {/*@bgen(jjtree)*/
  protected static JJTOPPLParserState jjtree = new JJTOPPLParserState();private static OWLOntologyManager owlOntologyManager;
        private static ConstraintSystem constraintSystem;
        private static OPPLAbstractFactory opplFactory = null;
        private static List completions = new ArrayList();
        static private AutoCompleterMatcher matcher=null;

        public static List getCompletions(){
                return completions;
        }

        static public void setAutoCompleterMatcher(AutoCompleterMatcher matcher){
                OPPLParser.matcher = matcher;
        }

        public static OPPLAbstractFactory getOPPLFactory(){
                if(opplFactory ==null){
                        opplFactory = new OPPLFactory(owlOntologyManager,
                        constraintSystem, owlOntologyManager.getOWLDataFactory(), constraintSystem.getReasoner());
                }
                return opplFactory;
        }

        public static void setOPPLFactory(OPPLAbstractFactory opplFactory){
                OPPLParser.opplFactory = opplFactory;
        }

        public static ConstraintSystem getConstraintSystem(){
                return constraintSystem;
        }

        public static  OWLDataFactory getOWLDataFactory(){
                return owlOntologyManager.getOWLDataFactory();
        }

        public static OWLOntologyManager getOWLOntologyManager(){
                return owlOntologyManager;
        }

        public static void setReasoner(OWLReasoner reasoner){
                constraintSystem.setReasoner(reasoner);
        }

   public OPPLParser(java.io.InputStream in, OWLOntologyManager owlOntologyManager, ConstraintSystem constraintSystem){
        this(in);
        OPPLParser.owlOntologyManager = owlOntologyManager;
        OPPLParser.constraintSystem = constraintSystem;
   }

        public static void ReInit(Reader reader,
                        OWLOntologyManager ontologyManager, ConstraintSystem cs) {
                ReInit(reader);
                owlOntologyManager = ontologyManager;
                constraintSystem = cs;

        }

        public OPPLParser(Reader reader, OWLOntologyManager ontologyManager,
                        ConstraintSystem cs) {
                this(reader);
                owlOntologyManager = ontologyManager;
                constraintSystem = cs;
        }
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression :");
    String ontologyPhysicalURI = args[0];
        OWLOntologyManager ontologyManager = OWLManager
                                .createOWLOntologyManager();

    try {
          OWLOntology ontology = ontologyManager.loadOntology(URI
                                        .create(ontologyPhysicalURI));
          ConstraintSystem constraintSystem = new ConstraintSystem(ontology,
                                        ontologyManager);
          new OPPLParser(System.in, ontologyManager, constraintSystem);
      SimpleNode n = OPPLParser.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  static final public SimpleNode Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        VariableDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        Query();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
        Actions();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setConstraintSystem(constraintSystem);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void VariableDeclaration() throws ParseException {
    VariableDefinition();
                completions.clear();
                completions.add(",");
                completions.add("SELECT");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
                completions.clear();
      VariableDefinition();
                completions.clear();
                completions.add(",");
                completions.add("SELECT");
    }
  }

  static final public void Actions() throws ParseException {
                /*@bgen(jjtree) Actions */
  SimpleNode jjtn000 = new SimpleNode(JJTACTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BEGIN);
      Action();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        Action();
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariableDefinition() throws ParseException {
                           /*@bgen(jjtree) VariableDefinition */
                           SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDEFINITION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token variableNameToken;
                                                   Token variableTypeToken;
                                                   VariableType variableType=null;
                                                   VariableScope variableScope;
                                                   Token directionToken=null;
                                                   VariableScopes.Direction direction=null;
                                                   Variable v=null;
    try {
      if (jj_2_1(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                completions.clear();
                completions.addAll(EnumSet.allOf(VariableType.class));
        variableTypeToken = jj_consume_token(VARIABLETYPE);
                variableType = VariableType.getVariableType(variableTypeToken.image);
        jj_consume_token(51);
        v = opplFunction(variableNameToken.image,variableType);
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                jjtn000.setVariable(v);
      } else if (jj_2_2(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                completions.clear();
                completions.addAll(EnumSet.allOf(VariableType.class));
        variableTypeToken = jj_consume_token(VARIABLETYPE);
                try{
                        variableType = VariableType.getVariableType(variableTypeToken.image);
                        jjtn000.setVariable(OPPLParser.getConstraintSystem().createVariable(variableNameToken.image,variableType ));
                }catch(OPPLException e){
                        {if (true) throw new ParseException(e.getMessage());}
                }
        jj_consume_token(OPENSQUAREYBRACKETS);
                completions.clear();
                completions.addAll(EnumSet.allOf(VariableScopes.Direction.class));
        direction = direction();
        variableScope = typeScope(direction, variableType);
        jj_consume_token(CLOSEDSQUAREBRACKETS);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                jjtn000.getVariable().setVariableScope(variableScope, getOPPLFactory().getVariableScopeChecker());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          variableNameToken = jj_consume_token(IDENTIFIER);
          jj_consume_token(COLON);
                completions.clear();
                completions.addAll(EnumSet.allOf(VariableType.class));
          variableTypeToken = jj_consume_token(VARIABLETYPE);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                completions.clear();
                try{
                        variableType = VariableType.getVariableType(variableTypeToken.image);
                        jjtn000.setVariable(OPPLParser.getConstraintSystem().createVariable(variableNameToken.image,variableType ));
                }catch(OPPLException e){
                        {if (true) throw new ParseException(e.getMessage());}
                }
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Variable opplFunction(String name,VariableType type) throws ParseException {
                                                            GeneratedValue value=null;
    jj_consume_token(CREATE);
    jj_consume_token(OPENPARENTHESYS);
    value = stringOperation();
    jj_consume_token(CLOSEDPARENTHESYS);
                try{
                        {if (true) return getConstraintSystem().createGeneratedVariable(name,type, value);}
                }catch(OPPLException e){
                        {if (true) throw new ParseException(e.getMessage());}
                }
    throw new Error("Missing return statement in function");
  }

  static final public GeneratedValue stringOperation() throws ParseException {
                                        GeneratedValue result=null;
    result = stringConcat();
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public GeneratedValue stringConcat() throws ParseException {
                                     GeneratedValue aGeneratedValue;
                                                                        Token link;String string;
                                                                        List<GeneratedValue> components = new ArrayList<GeneratedValue>();
    aGeneratedValue = generatedValue();
                components.add(aGeneratedValue);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(52);
      aGeneratedValue = generatedValue();
                components.add(aGeneratedValue);
    }
                if(components.size()==1){
                        {if (true) return aGeneratedValue;}
                }else{
                        {if (true) return new ConcatGeneratedValues(components);}
                }
    throw new Error("Missing return statement in function");
  }

  static final public GeneratedValue generatedValue() throws ParseException {
                                       Token valueToken;Token variableNameToken;Token variableAttributeToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      jj_consume_token(QUOTE);
      valueToken = jj_consume_token(ENTITYNAMES);
      jj_consume_token(QUOTE);
                {if (true) return new ConstantGeneratedValue(valueToken.image);}
      break;
    case IDENTIFIER:
      variableNameToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(53);
      variableAttributeToken = jj_consume_token(VARIABLEATTRIBUTE);
                String attributeString = variableAttributeToken.image;
                String variableName = variableNameToken.image;
                Variable v = getConstraintSystem().getVariable(variableName);
                if(v !=null){
                        try{
                                VariableGeneratedValue.Attribute attribute = VariableGeneratedValue.Attribute.parse(attributeString);
                                {if (true) return new VariableGeneratedValue(v,attribute);}
                        }catch(OPPLException e){

                                {if (true) throw new ParseException(e.getMessage());}
                        }
                }else{
                        {if (true) throw new ParseException("Invalid variable name: "+variableName);}
                }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VariableScopes.Direction direction() throws ParseException {
                                             Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBCLASSOF:
      jj_consume_token(SUBCLASSOF);
                {if (true) return Direction.SUBCLASSOF;}
      break;
    case SUB_PROPERTY_OF:
      jj_consume_token(SUB_PROPERTY_OF);
                {if (true) return Direction.SUBPROPERTYOF;}
      break;
    case OTHERDIRECTION:
      t = jj_consume_token(OTHERDIRECTION);
                {if (true) return Direction.getDirection(t.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static VariableScope typeScope(VariableScopes.Direction direction, VariableType variableType) throws ParseException {
                                                                                       /*@bgen(jjtree) typeScope */
             SimpleNode jjtn000 = new SimpleNode(JJTTYPESCOPE);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {Token t;
                String manSyntaxString = "";
                VariableScope toReturn = null;
                try {
                        while (true) {
                                t = getToken(1);
                                if (t.kind == COMMA || t.kind == CLOSEDSQUAREBRACKETS
                                                || t.kind == SEMICOLON || t.kind == BEGIN
                                                || t.kind == END || t.kind == WHERE || t.kind == EOF) {
                                        break;
                                } else {
                                        manSyntaxString += t.image + " ";
                                        t = getNextToken();
                                }
                        }
                        manSyntaxString = manSyntaxString.trim();
                        completions.clear();
                        ManchesterOWLSyntaxEditorParser parser = new ManchesterOWLSyntaxEditorParser(
                                        getOWLDataFactory(), manSyntaxString);
                        parser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
                        toReturn = parseScope(direction,variableType,parser);

                } catch (ParserException e) {
                        if(matcher!=null){

                                int lastIndexOfWhiteSpace = manSyntaxString.lastIndexOf(" ");
                                String word = lastIndexOfWhiteSpace == -1 ? manSyntaxString
                                                : manSyntaxString.substring(lastIndexOfWhiteSpace).trim();
                                Set<OWLObject> matches = matcher
                                                .getMatches(word, e.isClassNameExpected(), e
                                                                .isObjectPropertyNameExpected(), e
                                                                .isDataPropertyNameExpected(), e
                                                                .isIndividualNameExpected(), e
                                                                .isDatatypeNameExpected());
                                List kwMatches = new ArrayList(matches.size() + 10);
                                for (String s : e.getExpectedKeywords()) {
                                        if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
                                                kwMatches.add(s);
                                        }
                                }

                                completions.addAll(kwMatches);
                                completions.addAll(matches);
                                completions.addAll(OPPLVariableMatcher.matches(word,constraintSystem,e.isClassNameExpected(), e
                                                                .isObjectPropertyNameExpected(), e
                                                                .isDataPropertyNameExpected(), e
                                                                .isIndividualNameExpected(),false ));
                                }
                        throw new ParseException("Failed to parse the description "
                                        + manSyntaxString + " error: " + e.getMessage());
                }
                String expression = manSyntaxString+"**";
        ManchesterOWLSyntaxEditorParser completerParser = new ManchesterOWLSyntaxEditorParser(getOWLDataFactory(),expression);
        completerParser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try{

                parseScope(direction,variableType,completerParser);
                } catch (ParserException e) {
                                if(matcher!=null){

                                int lastIndexOfWhiteSpace = expression.lastIndexOf(" ");
                                String word = lastIndexOfWhiteSpace == -1 ? ""
                                                : manSyntaxString.substring(lastIndexOfWhiteSpace).trim();

                                List kwMatches = new ArrayList(10);
                                for (String s : e.getExpectedKeywords()) {
                                        if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
                                                kwMatches.add(s);
                                        }
                                }
                                completions.addAll(kwMatches);

                                }

                }
                return toReturn;/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  static VariableScope parseScope(VariableScopes.Direction direction,
                        VariableType variableType, ManchesterOWLSyntaxEditorParser parser) throws ParseException, ParserException {
                                                /*@bgen(jjtree) parseScope */
             SimpleNode jjtn000 = new SimpleNode(JJTPARSESCOPE);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {VariableScope scope = null;
                switch (variableType) {
                case CLASS:
                        OWLDescription description = parser.parseDescription();
                        if (direction.equals(Direction.SUBCLASSOF)) {
                                scope = VariableScopes.buildSubClassVariableScope(description);
                        } else {
                                scope = VariableScopes
                                                .buildSuperClassVariableScope(description);
                        }
                        break;
                case OBJECTPROPERTY:
                        OWLObjectProperty objectProperty = (OWLObjectProperty) parser
                                        .parseObjectPropertyExpression();
                        if (direction.equals(Direction.SUPERPROPERTYOF)) {
                                scope = VariableScopes
                                                .buildSuperPropertyVariableScope(objectProperty);
                        } else {
                                scope = VariableScopes
                                                .buildSubPropertyVariableScope(objectProperty);
                        }
                        break;
                case DATAPROPERTY:
                        OWLDataProperty dataProperty = parser.parseDataProperty();
                        if (direction.equals(Direction.SUPERPROPERTYOF)) {
                                scope = VariableScopes
                                                .buildSuperPropertyVariableScope(dataProperty);
                        } else {
                                scope = VariableScopes
                                                .buildSubPropertyVariableScope(dataProperty);
                        }
                        break;
                case INDIVIDUAL:
                        description = parser.parseDescription();
                        scope = VariableScopes.buildIndividualVariableScope(description);
                        break;
                default:
                        break;
                }
                return scope;/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof ParserException) {
                 throw (ParserException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  static final public void Constraint() throws ParseException {
                   /*@bgen(jjtree) Constraint */
                   SimpleNode jjtn000 = new SimpleNode(JJTCONSTRAINT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;OWLObject owlObject;Variable variable;
    try {
      t = jj_consume_token(IDENTIFIER);
                variable = OPPLParser.getConstraintSystem().getVariable(t.image);
                if(variable!=null){
                        jjtn000.setVariable(variable);
                }else{
                        {if (true) throw new ParseException("Undeclared variable "+t.image);}
                }
      jj_consume_token(NEQ);
      owlObject = OWLExpression(variable);
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                jjtn000.setExpression(owlObject);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static OWLObject OWLExpression(Variable v) throws ParseException {
 /*@bgen(jjtree) OWLExpression */
             SimpleNode jjtn000 = new SimpleNode(JJTOWLEXPRESSION);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {Token t;
                String manSyntaxString="";
                while(true){
                        t = getToken(1);
                        if (t.kind==COMMA || t.kind==SEMICOLON || t.kind==BEGIN || t.kind==END || t.kind == WHERE || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }

        VariableType type = v.getType();
        manSyntaxString = manSyntaxString.trim();
        ExpressionParser expressionParser = new ExpressionParser(manSyntaxString, OPPLParser.getConstraintSystem(),OPPLParser.getOWLDataFactory(), OPPLParser.getOWLOntologyManager());

        try{
        OWLObject toReturn = type.accept(expressionParser);
        return toReturn;
        } catch(Exception e){

                throw new ParseException(e.getMessage());
        }/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  static final public VariableType variableType() throws ParseException {
                                   Token t;
    t = jj_consume_token(VARIABLETYPE);
                {if (true) return VariableType.getVariableType(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public void Query() throws ParseException {
              /*@bgen(jjtree) Query */
              SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);OWLAxiom axiom;
    try {
      jj_consume_token(SELECT);
                completions.clear();
      axiom = Clause();
                jjtn000.addAxiom(axiom);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        axiom = Clause();
                jjtn000.addAxiom(axiom);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        Constraint();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          Constraint();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Action() throws ParseException {
               /*@bgen(jjtree) Action */
               SimpleNode jjtn000 = new SimpleNode(JJTACTION);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;OWLAxiom axiom;
    try {
      t = jj_consume_token(ACTIONS);
                jjtn000.setActionType(t.image);
      axiom = Clause();
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                jjtn000.setAxiom(axiom);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static OWLAxiom Clause() throws ParseException {
                  /*@bgen(jjtree) Clause */
     SimpleNode jjtn000 = new SimpleNode(JJTCLAUSE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {OWLAxiom toReturn =null;
        String manSyntaxString="";
        Token t;
                while(true){
                        t = getToken(1);
                        if (t.kind==COMMA || t.kind==SEMICOLON || t.kind==BEGIN || t.kind==END || t.kind == WHERE || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }
        manSyntaxString = manSyntaxString.trim();
        VariableManchesterOWLSyntaxParser parser = new VariableManchesterOWLSyntaxParser(OPPLParser.getOWLDataFactory(), manSyntaxString, OPPLParser.getConstraintSystem()
                                        );
        parser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try{
                toReturn = parser.parseAxiom();

        }catch(ParserException e){
                if(matcher!=null){

                                int lastIndexOfWhiteSpace = manSyntaxString.lastIndexOf(" ");
                                String word = lastIndexOfWhiteSpace == -1 ? manSyntaxString
                                                : manSyntaxString.substring(lastIndexOfWhiteSpace).trim();
                                Set<OWLObject> matches = matcher
                                                .getMatches(word, e.isClassNameExpected(), e
                                                                .isObjectPropertyNameExpected(), e
                                                                .isDataPropertyNameExpected(), e
                                                                .isIndividualNameExpected(), e
                                                                .isDatatypeNameExpected());
                                List kwMatches = new ArrayList(matches.size() + 10);
                                for (String s : e.getExpectedKeywords()) {
                                        if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
                                                kwMatches.add(s);
                                        }
                                }
                                completions.addAll(kwMatches);
                                completions.addAll(matches);
                                                                completions.addAll(OPPLVariableMatcher.matches(word,constraintSystem,e.isClassNameExpected(), e
                                                                .isObjectPropertyNameExpected(), e
                                                                .isDataPropertyNameExpected(), e
                                                                .isIndividualNameExpected(),false ));
                                }
                throw new ParseException(e.getMessage());
        }
        String expression = manSyntaxString+"**";
        VariableManchesterOWLSyntaxParser completerParser = new VariableManchesterOWLSyntaxParser(OPPLParser.getOWLDataFactory(), expression, OPPLParser.getConstraintSystem()
                                        );
        completerParser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try{

                completerParser.parseAxiom();
                } catch (ParserException e) {
                                if(matcher!=null){

                                int lastIndexOfWhiteSpace = expression.lastIndexOf(" ");
                                String word = lastIndexOfWhiteSpace == -1 ? ""
                                                : manSyntaxString.substring(lastIndexOfWhiteSpace).trim();

                                List kwMatches = new ArrayList(10);
                                for (String s : e.getExpectedKeywords()) {
                                        if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
                                                kwMatches.add(s);
                                        }
                                }
                                completions.addAll(kwMatches);

                                }

                }
                return toReturn;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(OPENSQUAREYBRACKETS)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public OPPLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x800,0x10000,0x80000,0x200000,0x200000,0x800,0x0,0x4000800,0x0,0x200000,0x200000,0x20000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x1204,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public OPPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public OPPLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OPPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OPPLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OPPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OPPLParser(OPPLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OPPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
