/* Generated By:JavaCC: Do not edit this line. OPLActionsParserTokenManager.java */
package uk.ac.manchester.gong.opl.javacc.actions;

public class OPLActionsParserTokenManager implements OPLActionsParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 50;
         }
         if ((active0 & 0xffff8000000L) != 0L)
         {
            jjmatchedKind = 8;
            return 50;
         }
         if ((active0 & 0x400L) != 0L)
            return 50;
         if ((active0 & 0x2000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0xff7f8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 50;
         return -1;
      case 2:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x947f8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x6b002000000L) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x907f8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 50;
         return -1;
      case 4:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x805f8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x10200000000L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active0 & 0x805f8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0x178000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x80480000000L) != 0L)
            return 50;
         return -1;
      case 7:
         if ((active0 & 0x78000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 50;
         return -1;
      case 8:
         if ((active0 & 0x78000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         return -1;
      case 9:
         if ((active0 & 0x70000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 50;
         return -1;
      case 10:
         if ((active0 & 0x70000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         return -1;
      case 11:
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 0;
            }
            return 50;
         }
         if ((active0 & 0x60000000L) != 0L)
            return 50;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 11);
      case 41:
         return jjStopAtPos(0, 12);
      case 58:
         return jjStopAtPos(0, 6);
      case 59:
         return jjStopAtPos(0, 5);
      case 63:
         return jjStopAtPos(0, 15);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 13, 7);
      case 93:
         return jjStopAtPos(0, 14);
      case 95:
         return jjStartNfaWithStates_0(0, 10, 50);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x9000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x140000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80020000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x60000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4018000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x50280000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6500000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 50);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 50);
         break;
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x218000000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 50);
         break;
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4500000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 50);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x480000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 50);
         break;
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x28000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x500000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 50);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 50);
         break;
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 50);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 50);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 30, 50);
         break;
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 28, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 11);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 58)
                     jjCheckNAdd(18);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 58)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 11);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 58 && kind > 20)
                     kind = 20;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 58)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 62 && kind > 22)
                     kind = 22;
                  break;
               case 25:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 28:
                  if (curChar == 62)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(29);
                  break;
               case 35:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 62 && kind > 24)
                     kind = 24;
                  break;
               case 42:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 49:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 11);
                  else if (curChar == 91)
                     jjCheckNAdd(7);
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 1:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 6:
                  if (curChar == 91)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 93)
                     kind = 18;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 11);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 13:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 14, 15, 16, 17, 19, 20, 26, 27, 36, 37, 4, 5, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\73", "\72", null, null, null, "\137", "\50", 
"\51", "\133", "\135", "\77", null, null, null, null, null, null, null, null, null, 
"\101\104\104", "\122\105\115\117\126\105", "\163\165\142\103\154\141\163\163\117\146", 
"\163\165\142\120\162\157\160\145\162\164\171\117\146", "\145\161\165\151\166\141\154\145\156\164\124\157", 
"\144\151\163\152\157\151\156\164\127\151\164\150", "\162\141\156\147\145\117\146", "\144\157\155\141\151\156\117\146", 
"\154\141\142\145\154", "\143\157\155\155\145\156\164", "\157\162", "\141\156\144", "\156\157\164", 
"\163\157\155\145", "\141\154\154", "\166\141\154\165\145", "\155\151\156", "\155\141\170", 
"\145\170\141\143\164\154\171", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[50];
private final int[] jjstateSet = new int[100];
protected char curChar;
public OPLActionsParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public OPLActionsParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 50; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 17)
   {
      jjmatchedKind = 17;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
