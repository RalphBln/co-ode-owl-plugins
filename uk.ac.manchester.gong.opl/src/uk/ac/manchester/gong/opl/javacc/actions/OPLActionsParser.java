/* Generated By:JavaCC: Do not edit this line. OPLActionsParser.java */
package uk.ac.manchester.gong.opl.javacc.actions;

import org.semanticweb.owl.model.*;
import uk.ac.manchester.gong.opl.select.SelectStatementResult;

import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.util.HashSet;
import java.util.Map;
import java.util.regex.Matcher;

public class OPLActionsParser implements OPLActionsParserConstants {

        public OPLActionsParser(){}
        public static void parse(String inString, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException{
                OWLEntity owlentity = (OWLEntity)selectResult.matchedOWLObject();
                Reader reader = new StringReader(inString);
                OPLActionsParser parser = new OPLActionsParser(reader);
                parser.Input(owlentity, ns2uri, manager, selectResult);
        }

  final public void Input(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        Token add=null;
        Token remove=null;
        OWLAxiom axiom = null;
    if (jj_2_1(2)) {
      add = jj_consume_token(ADD);
    } else if (jj_2_2(2)) {
      remove = jj_consume_token(REMOVE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    axiom = Axiom(owlentity, ns2uri, manager, selectResult);
    jj_consume_token(0);
                try{
                if (axiom != null){
                        OWLOntology ontology = manager.getOntology(URI.create(owlentity.getURI().toString().split("#")[0]));
                        //System.out.println(owlentity);
                        //System.out.println(axiom);
                        //System.out.println("ActionStatement");
                        if(add != null){
                                AddAxiom addAxiom = new AddAxiom(ontology, axiom);
                        manager.applyChange(addAxiom);
                        }
                        else{
                                RemoveAxiom removeAxiom = new RemoveAxiom(ontology, axiom);
                        manager.applyChange(removeAxiom);
                        }
                }
                }
                catch (OWLException e1){e1.printStackTrace();}
  }

  final public OWLAxiom Axiom(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager,SelectStatementResult selectResult) throws ParseException {
        OWLAxiom axiom = null;
    if (jj_2_3(2)) {
      axiom = owlannotation(owlentity, manager);
    } else if (jj_2_4(2)) {
      axiom = owlsubclassof(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_5(2)) {
      axiom = owlequivalentclass(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_6(2)) {
      axiom = owlsubpropertyof(owlentity, ns2uri, manager, selectResult);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom owlannotation(OWLEntity owlentity,OWLOntologyManager manager) throws ParseException {
        Token tokenAnnotValue;
        Token tokenlang;
    jj_consume_token(Var);
    jj_consume_token(LABEL);
    tokenAnnotValue = jj_consume_token(AnnotValue);
    tokenlang = jj_consume_token(Lang);
                OWLAnnotation annot = null;
                OWLAxiom axiom = null;

                        OWLDataFactory factory = manager.getOWLDataFactory();
                        annot = factory.getOWLLabelAnnotation(tokenAnnotValue.image);
                        axiom =  factory.getOWLEntityAnnotationAxiom((OWLEntity) owlentity, annot);

                {if (true) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom owlsubclassof(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription superclass;
    jj_consume_token(Var);
    jj_consume_token(SUBCLASSOF);
    superclass = ClassDescription(owlentity, ns2uri, manager, selectResult);
                OWLAxiom axiom = null;

                        OWLDataFactory factory = manager.getOWLDataFactory();

                        if(superclass != null){
                        axiom = factory.getOWLSubClassAxiom((OWLDescription)owlentity,superclass);
                        }


                {if (true) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom owlequivalentclass(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription equivalentclass;
    jj_consume_token(Var);
    jj_consume_token(EQUIVALENTTO);
    equivalentclass = ClassDescription(owlentity, ns2uri, manager, selectResult);
                OWLAxiom axiom = null;
                OWLDataFactory factory = manager.getOWLDataFactory();
                HashSet equivSet = new HashSet();
                equivSet.add((OWLDescription)owlentity);
                equivSet.add(equivalentclass);
                axiom = factory.getOWLEquivalentClassesAxiom(equivSet);
                {if (true) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public OWLAxiom owlsubpropertyof(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLObjectProperty superproperty;
    jj_consume_token(Var);
    jj_consume_token(SUBPROPERTYOF);
    superproperty = resolvedOWLObjectProperty(owlentity, ns2uri, manager);
                OWLAxiom axiom = null;
            OWLDataFactory factory = manager.getOWLDataFactory();
        axiom = factory.getOWLSubObjectPropertyAxiom((OWLObjectProperty)owlentity,superproperty);
                {if (true) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription ClassDescription(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription owldescription;
    owldescription = And(owlentity, ns2uri, manager, selectResult);
        {if (true) return owldescription;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription And(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
        OWLDescription totaldescription = null;
    description = Or(owlentity, ns2uri, manager, selectResult);
     totaldescription=description;
    label_1:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(AND);
      description = Or(owlentity, ns2uri, manager, selectResult);
                        if(totaldescription !=null){
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        HashSet set = new HashSet();
                        set.add(totaldescription);
                        set.add(description);
                        totaldescription = factory.getOWLObjectIntersectionOf(set);
                        }
    }
        {if (true) return totaldescription;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription Or(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
        OWLDescription totaldescription;
    description = NonNaryBooleanDescription(owlentity, ns2uri, manager, selectResult);
         totaldescription=description;
    label_2:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
      description = NonNaryBooleanDescription(owlentity, ns2uri, manager, selectResult);
                    if(totaldescription !=null){
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        HashSet set = new HashSet();
                        set.add(totaldescription);
                        set.add(description);
                        totaldescription = factory.getOWLObjectUnionOf(set);
                    }
    }
        {if (true) return totaldescription;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NonNaryBooleanDescription(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
    if (jj_2_9(2)) {
      description = ObjectPropertyRestriction(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_10(2)) {
      description = Not(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_11(2)) {
      description = NamedClassOrNestedDescription(owlentity, ns2uri, manager, selectResult);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription Not(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
    jj_consume_token(NOT);
    description = NamedClassOrNestedDescription(owlentity, ns2uri, manager, selectResult);
                OWLDataFactory factory = manager.getOWLDataFactory();
                if(description != null){
                        description = factory.getOWLObjectComplementOf(description);
                }

        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription ObjectPropertyRestriction(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
    if (jj_2_12(2)) {
      description = OWLObjectSomeRestriction(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_13(2)) {
      description = OWLObjectAllRestriction(owlentity, ns2uri, manager, selectResult);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription OWLObjectAllRestriction(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description = null;
        OWLObjectProperty property;
        OWLDescription filler;
    property = resolvedOWLObjectProperty(owlentity, ns2uri, manager);
    jj_consume_token(ALL);
    filler = NamedClassOrNestedDescription(owlentity, ns2uri, manager, selectResult);
                OWLDataFactory factory = manager.getOWLDataFactory();
                if(filler != null){
                description = (OWLDescription) factory.getOWLObjectAllRestriction(property, filler);
                }

        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription OWLObjectSomeRestriction(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description = null;
        OWLObjectProperty property;
        OWLDescription filler;
    property = resolvedOWLObjectProperty(owlentity, ns2uri, manager);
    jj_consume_token(SOME);
    filler = NamedClassOrNestedDescription(owlentity, ns2uri, manager, selectResult);
                OWLDataFactory factory = manager.getOWLDataFactory();
                if(filler != null){
                description = (OWLDescription) factory.getOWLObjectSomeRestriction(property, filler);
                }


        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NamedClassOrNestedDescription(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
    if (jj_2_14(2)) {
      description = owlresolvedclass(owlentity, ns2uri, manager, selectResult);
    } else if (jj_2_15(2)) {
      description = NestedClassDescription(owlentity, ns2uri, manager, selectResult);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription NestedClassDescription(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        OWLDescription description;
    jj_consume_token(LeftPar);
    description = ClassDescription(owlentity, ns2uri, manager, selectResult);
    jj_consume_token(RightPar);
        {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLDescription owlresolvedclass(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager, SelectStatementResult selectResult) throws ParseException {
        Token nonresolvedclass=null;
        Token nonresolvedgroup=null;
        Token owllabelnamedobject=null;
        Token labelgroup=null;
        OWLDescription description=null;
    if (jj_2_16(2)) {
      nonresolvedclass = jj_consume_token(OWLNamedObject);
    } else if (jj_2_17(2)) {
      nonresolvedgroup = jj_consume_token(Group);
    } else if (jj_2_18(2)) {
      owllabelnamedobject = jj_consume_token(OWLLABELNamedObject);
    } else if (jj_2_19(2)) {
      labelgroup = jj_consume_token(LABELGroup);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        if(nonresolvedgroup!=null){
                                String NS = (nonresolvedgroup.image).split(":")[0];
                                URI nsURI = (URI)ns2uri.get(NS);
                                if (nsURI != null){
                                int groupnumber = Integer.parseInt(((nonresolvedgroup.image).split("RG")[1]).substring(0,1));
                                Matcher matcher = selectResult.regexpmatcher();
                                String ClassName=getGroupContent(matcher, groupnumber);
                                URI ClassURI = URI.create(nsURI +"#" + ClassName);
                                description= (OWLDescription)factory.getOWLClass(ClassURI);
                                }
                                //description= (OWLDescription)factory.getOWLClass(URI.create("http://www.gong.manchester.ac.uk/opl.owl#spain"));
                        }
                        else if (owllabelnamedobject!=null){
                                String NS = (owllabelnamedobject.image).split(":")[0];
                URI nsURI = (URI)ns2uri.get(NS);
                if (nsURI != null){
                                //description= (OWLDescription)factory.getOWLClass(URI.create("http://www.gong.manchester.ac.uk/opl.owl#spain"));
                                String label = (owllabelnamedobject.image).split("<LABEL>")[1];
                                OWLOntology ontology = manager.getOntology(nsURI);
                                description=(OWLDescription)getClassByLabel (ontology, label);
                                }
                        }
                        else if(labelgroup!=null){
                                String NS = (labelgroup.image).split(":")[0];
                URI nsURI = (URI)ns2uri.get(NS);
                if (nsURI != null){
                                String group = (labelgroup.image).split("<LABEL>")[1];
                                int groupnumber = Integer.parseInt((group.split("RG")[1]).substring(0,1));
                                Matcher matcher = selectResult.regexpmatcher();
                                String ClassName=getGroupContent(matcher, groupnumber);
                                OWLOntology ontology = manager.getOntology(nsURI);
                                description=(OWLDescription)getClassByLabel (ontology, ClassName);
                }
                        }
                        else{
                                String NS = (nonresolvedclass.image).split(":")[0];
                URI nsURI = (URI)ns2uri.get(NS);
                if (nsURI != null){
                                String ClassName = (nonresolvedclass.image).split(":")[1];
                                URI ClassURI = URI.create(nsURI +"#" + ClassName);
                                description= (OWLDescription)factory.getOWLClass(ClassURI);
                }
                        }

                {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public OWLObjectProperty resolvedOWLObjectProperty(OWLEntity owlentity, Map ns2uri, OWLOntologyManager manager) throws ParseException {
        Token nonresolvedproperty;
        OWLObjectProperty property=null;
    nonresolvedproperty = jj_consume_token(OWLNamedObject);
                        String NS = (nonresolvedproperty.image).split(":")[0];
                        URI nsURI = (URI)ns2uri.get(NS);
                        if (nsURI != null){
                        String PropName = (nonresolvedproperty.image).split(":")[1];
                        URI PropURI = URI.create(nsURI +"#" + PropName);
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        property = factory.getOWLObjectProperty(PropURI);
            }
                {if (true) return property;}
    throw new Error("Missing return statement in function");
  }

  final public String getGroupContent(Matcher matcher, int groupnumber) throws ParseException {
        String content=null;
                if(matcher != null){
                        int groups = matcher.groupCount();
                        for(int i=1;i<=groups;i++){
                                if(groupnumber==i){
                                        content = matcher.group(i);
                                        //System.out.println( groupnumber +" ingroup " + matcher.group(i));
                                }
                        }
                }
                {if (true) return content;}
    throw new Error("Missing return statement in function");
  }

  final public OWLClass getClassByLabel(OWLOntology ontology, String label) throws ParseException {
        OWLClass resultclass = null;
                for(OWLClass cls : ontology.getReferencedClasses()) {
                        String finalLabel = null;
                        for(OWLAnnotationAxiom annotAxiom : cls.getAnnotationAxioms(ontology)){
                                if(annotAxiom.getAnnotation().getAnnotationURI().getFragment().equals("label")){
                                        String wholeLabel = annotAxiom.getAnnotation().getAnnotationValue().toString();
                                        if(wholeLabel.contains("@")){
                                                finalLabel = wholeLabel.split("@")[0];
                                        }
                                        else if(wholeLabel.contains("^^")){
                                                finalLabel = wholeLabel.split("\"")[1];
                                        }
                                        else{
                                                finalLabel = wholeLabel;
                                        }
                                }
                        }
                        if(finalLabel!=null && label!=null){
                                if(finalLabel.equals(label)){
                                        resultclass=cls;
                                }
                        }
                }


    {if (true) return resultclass;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(OWLNamedObject)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LABELGroup)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(OWLLABELNamedObject)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(Group)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(OWLNamedObject)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(Var)) return true;
    if (jj_scan_token(SUBCLASSOF)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(REMOVE)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(Var)) return true;
    if (jj_scan_token(SUBPROPERTYOF)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(Var)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(LeftPar)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(Var)) return true;
    if (jj_scan_token(EQUIVALENTTO)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  public OPLActionsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public OPLActionsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public OPLActionsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OPLActionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OPLActionsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OPLActionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OPLActionsParser(OPLActionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OPLActionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
