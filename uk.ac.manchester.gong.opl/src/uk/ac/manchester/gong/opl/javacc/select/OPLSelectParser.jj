/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  LOOKAHEAD=2;
  FORCE_LA_CHECK = true;
}
PARSER_BEGIN(OPLSelectParser)
package uk.ac.manchester.gong.opl.javacc.select;

import java.io.Reader;
import java.io.StringReader;
import java.util.Map;
import java.util.HashSet;
import java.net.URI;
import java.util.regex.Matcher;

import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.OWLOntologyManager;
import org.semanticweb.owl.model.OWLEntity;
import org.semanticweb.owl.model.AddAxiom;
import org.semanticweb.owl.model.RemoveAxiom;
import org.semanticweb.owl.model.OWLAnnotation;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLAnnotationAxiom;
import org.semanticweb.owl.model.OWLException;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.model.OWLClass;
import org.semanticweb.owl.model.OWLDescription;
import org.semanticweb.owl.model.OWLObjectProperty;

import uk.ac.manchester.gong.opl.select.SelectStatementResult;

public class OPLSelectParser {
	
	public OPLSelectParser(){}

	public static OWLDescription parse(String inString, Map ns2uri, OWLOntologyManager manager) throws ParseException{
		Reader reader = new StringReader(inString);
		OPLSelectParser parser = new OPLSelectParser(reader);
		OWLDescription owldescription = parser.Input(ns2uri, manager);
		System.out.println("[OWLDESCRIPTION] " + owldescription);
		return owldescription;
	}

        public static OWLObjectProperty parseObjectProperty(String inString, Map ns2uri, OWLOntologyManager manager) throws ParseException{
            Reader reader = new StringReader(inString);
            OPLSelectParser parser = new OPLSelectParser(reader);
            OWLObjectProperty owlProperty = parser.resolvedOWLObjectProperty(ns2uri, manager);
            System.out.println("[OWLPROPERTY] " + owlProperty);
            return owlProperty;
        }

}
PARSER_END(OPLSelectParser)

SKIP :
{ " "|"\t"|"\n"|"\r"}

TOKEN :
{
  <Semicolon: ";">
| <Colon: ":">  
| <UppChar: ["A"-"Z"]>
| <LowChar: ["a"-"z"]>
| <Digit: ["0"-"9"]>
| <UnderScore: "_">
| <LeftPar: "(">
| <RightPar: ")">
| <LeftBra: "[">
| <RightBra: "]">
| <Question: "?">
| <AnnotValue: "\""(<LowChar>)+"\"">
| <AnnotChar: (~[])>
| <Lang: <LeftBra>(<LowChar>)+<RightBra>>
| <NS: (["A"-"Z","a"-"z","_","0"-"9"])+<Colon>>
| <OWLNamedObject: <NS>(<LowChar>|<UppChar>|<Digit>|<UnderScore>)+>
| <OWLLABELNamedObject: <NS>"<LABEL>"(<LowChar>|<UppChar>|<Digit>|<UnderScore>)+>
| <SUBCLASSOF: "subClassOf">
| <DESCENDANTOF: "descendantOf">
| <EQUIVALENTTO: "equivalentTo">
| <DISJOINTWITH: "disjointWith">
| <RANGEOF: "rangeOf">
| <DOMAINOF: "domainOf">
| <LABEL: "label">
| <COMMENT: "comment">
| <OR: "or">
| <AND: "and">
| <NOT: "not">
| <SOME: "some">
| <ALL: "all">
| <VALUE: "value">
| <MIN: "min">
| <MAX: "max">
| <EXACTLY: "exactly">
}

OWLDescription Input(Map ns2uri, OWLOntologyManager manager) :
{

	OWLDescription description = null;
}
{
	description = ClassDescription(ns2uri, manager)<EOF>
	{ 
			return description;
	}
}

OWLDescription ClassDescription(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
	(
	description=And(ns2uri, manager)
	)
    {
    	return description;
    }
}

OWLDescription And(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
	OWLDescription totaldescription;
}
{
	description=Or(ns2uri, manager) 
    {totaldescription=description;}
    (
    	<AND> description=Or(ns2uri, manager)
    	{
    			OWLDataFactory factory = manager.getOWLDataFactory();
    			HashSet set = new HashSet();
    			set.add(totaldescription);
    			set.add(description);
    			totaldescription = factory.getOWLObjectIntersectionOf(set);   
    	}
    )*
    {
    	return totaldescription;
    }
}
OWLDescription Or(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
	OWLDescription totaldescription;
}
{
	description=NonNaryBooleanDescription(ns2uri, manager) 
	{totaldescription=description;}
	(
		<OR> description=NonNaryBooleanDescription(ns2uri, manager)
		{
    			OWLDataFactory factory = manager.getOWLDataFactory();
    			HashSet set = new HashSet();
    			set.add(totaldescription);
    			set.add(description);
    			totaldescription = factory.getOWLObjectUnionOf(set);   
		}
	)*
	{
    	return totaldescription;
    }
}

OWLDescription NonNaryBooleanDescription(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
	(
	description=ObjectPropertyRestriction(ns2uri, manager)
	|description=Not(ns2uri, manager)
	|description=NamedClassOrNestedDescription(ns2uri, manager)
	)
    {
    	return description;
    }

}

OWLDescription Not(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
	<NOT> (description=NamedClassOrNestedDescription(ns2uri, manager))
	{
    	OWLDataFactory factory = manager.getOWLDataFactory();
		description = factory.getOWLObjectComplementOf(description);   
    	return description;
    }
}

OWLDescription ObjectPropertyRestriction(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
	(
    description=OWLObjectSomeRestriction(ns2uri, manager)
    |description=OWLObjectAllRestriction(ns2uri, manager)
    //|description=OWLObjectCardinalityRestriction()
    //|description=OWLObjectValueRestriction()
	)
	{
    	return description;
    }
}

OWLDescription OWLObjectAllRestriction(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description = null;
	OWLObjectProperty property;
	OWLDescription filler;
}
{
    (property=resolvedOWLObjectProperty(ns2uri, manager) <ALL> filler=NamedClassOrNestedDescription(ns2uri, manager))
    {
    	OWLDataFactory factory = manager.getOWLDataFactory();
    	description = (OWLDescription) factory.getOWLObjectAllRestriction(property, filler);
    	return description;
    }
}

OWLDescription OWLObjectSomeRestriction(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description = null;
	OWLObjectProperty property;
	OWLDescription filler;
}
{
    (property=resolvedOWLObjectProperty(ns2uri, manager) <SOME> filler=NamedClassOrNestedDescription(ns2uri, manager))
    {
    	OWLDataFactory factory = manager.getOWLDataFactory();
    	description = (OWLDescription) factory.getOWLObjectSomeRestriction(property, filler);	
    	return description;
    }
}

OWLDescription NamedClassOrNestedDescription(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
    (description=owlresolvedclass(ns2uri, manager) | description=NestedClassDescription(ns2uri, manager)) 
	{
    	return description;
    }
}

OWLDescription NestedClassDescription(Map ns2uri, OWLOntologyManager manager):
{
	OWLDescription description;
}
{
	<LeftPar>description=ClassDescription(ns2uri, manager)<RightPar>
	{
    	return description;
    }
}

OWLDescription owlresolvedclass(Map ns2uri, OWLOntologyManager manager):
{
	Token nonresolvedclass=null;
	Token owllabelnamedobject=null;
	OWLDescription description=null;
}
{
	(
		nonresolvedclass=<OWLNamedObject>
		|owllabelnamedobject=<OWLLABELNamedObject>
	)
	{
		OWLDataFactory factory = manager.getOWLDataFactory(); 
		if (owllabelnamedobject!=null){
			String label = (owllabelnamedobject.image).split("<LABEL>")[1];
			String NS = (owllabelnamedobject.image).split(":")[0];
			OWLOntology ontology = manager.getOntology((URI)ns2uri.get(NS));
			description=(OWLDescription)getClassByLabel (ontology, label);
		}
		else{
			String NS = (nonresolvedclass.image).split(":")[0];
			String ClassName = (nonresolvedclass.image).split(":")[1];
			URI ClassURI = URI.create(ns2uri.get(NS) +"#" + ClassName);
			description= (OWLDescription)factory.getOWLClass(ClassURI);
		}
		return description;
	}
}

OWLObjectProperty resolvedOWLObjectProperty(Map ns2uri, OWLOntologyManager manager):
{
	Token nonresolvedproperty;
	OWLObjectProperty property=null;
}
{
	nonresolvedproperty=<OWLNamedObject>
	{
		String NS = (nonresolvedproperty.image).split(":")[0];
		String PropName = (nonresolvedproperty.image).split(":")[1];
		URI PropURI = URI.create(ns2uri.get(NS) +"#" + PropName);
		OWLDataFactory factory = manager.getOWLDataFactory();
		property = factory.getOWLObjectProperty(PropURI);
		return property;
	}
}

OWLClass getClassByLabel (OWLOntology ontology, String label):
{
	OWLClass resultclass = null;
}
{
	{
	
		for(OWLClass cls : ontology.getReferencedClasses()) {
			String finalLabel = null;
			for(OWLAnnotationAxiom annotAxiom : cls.getAnnotationAxioms(ontology)){
				if(annotAxiom.getAnnotation().getAnnotationURI().getFragment().equals("label")){
					String wholeLabel = annotAxiom.getAnnotation().getAnnotationValue().toString();
					if(wholeLabel.contains("@")){
						finalLabel = wholeLabel.split("@")[0];
					}
					else if(wholeLabel.contains("^^")){
						finalLabel = wholeLabel.split("\"")[1];
					}
					else{
						finalLabel = wholeLabel;
					}
				}
			}

			if(finalLabel!=null && label!=null){
				if(finalLabel.equals(label)){
		  			resultclass=cls;
				}
			}
		}


    return resultclass;
	}
}
