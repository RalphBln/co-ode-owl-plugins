/* Generated By:JavaCC: Do not edit this line. OPLSelectParser.java */
package uk.ac.manchester.gong.opl.javacc.select;

import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Map;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.search.EntitySearcher;
@SuppressWarnings("all")
public class OPLSelectParser implements OPLSelectParserConstants {

        public OPLSelectParser(){}

    public static OWLClassExpression parse(String inString, Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
                Reader reader = new StringReader(inString);
                OPLSelectParser parser = new OPLSelectParser(reader);
        OWLClassExpression owldescription = parser.Input(ns2uri, manager);
                System.out.println("[OWLDESCRIPTION] " + owldescription);
                return owldescription;
        }

        public static OWLObjectProperty parseObjectProperty(String inString, Map ns2uri, OWLOntologyManager manager) throws ParseException{
            Reader reader = new StringReader(inString);
            OPLSelectParser parser = new OPLSelectParser(reader);
            OWLObjectProperty owlProperty = parser.resolvedOWLObjectProperty(ns2uri, manager);
            System.out.println("[OWLPROPERTY] " + owlProperty);
            return owlProperty;
        }

    final public OWLClassExpression
            Input(Map ns2uri, OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description = null;
    description = ClassDescription(ns2uri, manager);
    jj_consume_token(0);
                        {if (true) {
                            return description;
                        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression ClassDescription(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description;
    description = And(ns2uri, manager);
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression And(Map ns2uri, OWLOntologyManager manager)
            throws ParseException {
        OWLClassExpression description;
        OWLClassExpression totaldescription;
    description = Or(ns2uri, manager);
     totaldescription=description;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(AND);
      description = Or(ns2uri, manager);
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        HashSet set = new HashSet();
                        set.add(totaldescription);
                        set.add(description);
                        totaldescription = factory.getOWLObjectIntersectionOf(set);
    }
        {if (true) {
            return totaldescription;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression Or(Map ns2uri, OWLOntologyManager manager)
            throws ParseException {
        OWLClassExpression description;
        OWLClassExpression totaldescription;
    description = NonNaryBooleanDescription(ns2uri, manager);
         totaldescription=description;
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
      description = NonNaryBooleanDescription(ns2uri, manager);
                        OWLDataFactory factory = manager.getOWLDataFactory();
                        HashSet set = new HashSet();
                        set.add(totaldescription);
                        set.add(description);
                        totaldescription = factory.getOWLObjectUnionOf(set);
    }
        {if (true) {
            return totaldescription;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression NonNaryBooleanDescription(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description;
    if (jj_2_3(2)) {
      description = ObjectPropertyRestriction(ns2uri, manager);
    } else if (jj_2_4(2)) {
      description = Not(ns2uri, manager);
    } else if (jj_2_5(2)) {
      description = NamedClassOrNestedDescription(ns2uri, manager);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression Not(Map ns2uri, OWLOntologyManager manager)
            throws ParseException {
        OWLClassExpression description;
    jj_consume_token(NOT);
    description = NamedClassOrNestedDescription(ns2uri, manager);
        OWLDataFactory factory = manager.getOWLDataFactory();
                description = factory.getOWLObjectComplementOf(description);
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression ObjectPropertyRestriction(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description;
    if (jj_2_6(2)) {
      description = OWLObjectSomeRestriction(ns2uri, manager);
    } else if (jj_2_7(2)) {
      description = OWLObjectAllRestriction(ns2uri, manager);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression OWLObjectAllRestriction(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description = null;
        OWLObjectProperty property;
        OWLClassExpression filler;
    property = resolvedOWLObjectProperty(ns2uri, manager);
    jj_consume_token(ALL);
    filler = NamedClassOrNestedDescription(ns2uri, manager);
        OWLDataFactory factory = manager.getOWLDataFactory();
        description = factory.getOWLObjectAllValuesFrom(property, filler);
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression OWLObjectSomeRestriction(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description = null;
        OWLObjectProperty property;
        OWLClassExpression filler;
    property = resolvedOWLObjectProperty(ns2uri, manager);
    jj_consume_token(SOME);
    filler = NamedClassOrNestedDescription(ns2uri, manager);
        OWLDataFactory factory = manager.getOWLDataFactory();
        description = factory.getOWLObjectSomeValuesFrom(property, filler);
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression NamedClassOrNestedDescription(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description;
    if (jj_2_8(2)) {
      description = owlresolvedclass(ns2uri, manager);
    } else if (jj_2_9(2)) {
      description = NestedClassDescription(ns2uri, manager);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression NestedClassDescription(Map ns2uri,
            OWLOntologyManager manager) throws ParseException {
        OWLClassExpression description;
    jj_consume_token(LeftPar);
    description = ClassDescription(ns2uri, manager);
    jj_consume_token(RightPar);
        {if (true) {
            return description;
        }}
    throw new Error("Missing return statement in function");
  }

    final public OWLClassExpression owlresolvedclass(Map<String, IRI> ns2uri,
            OWLOntologyManager manager) throws ParseException {
        Token nonresolvedclass=null;
        Token owllabelnamedobject=null;
        OWLClassExpression description = null;
    if (jj_2_10(2)) {
      nonresolvedclass = jj_consume_token(OWLNamedObject);
    } else if (jj_2_11(2)) {
      owllabelnamedobject = jj_consume_token(OWLLABELNamedObject);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                OWLDataFactory factory = manager.getOWLDataFactory();
                if (owllabelnamedobject!=null){
                        String label = owllabelnamedobject.image.split("<LABEL>")[1];
                        String NS = owllabelnamedobject.image.split(":")[0];
            OWLOntology ontology = manager.getOntology(ns2uri.get(NS));
            description = getClassByLabel(ontology, label);
                }
                else{
                        String NS = nonresolvedclass.image.split(":")[0];
                        String ClassName = nonresolvedclass.image.split(":")[1];
            IRI ClassURI = IRI.create(ns2uri.get(NS) + "#" + ClassName);
            description = factory.getOWLClass(ClassURI);
                }
                {if (true) {
                    return description;
                }}
    throw new Error("Missing return statement in function");
  }

  final public OWLObjectProperty resolvedOWLObjectProperty(Map ns2uri, OWLOntologyManager manager) throws ParseException {
        Token nonresolvedproperty;
        OWLObjectProperty property=null;
    nonresolvedproperty = jj_consume_token(OWLNamedObject);
                String NS = nonresolvedproperty.image.split(":")[0];
                String PropName = nonresolvedproperty.image.split(":")[1];
        IRI PropURI = IRI.create(ns2uri.get(NS) + "#" + PropName);
                OWLDataFactory factory = manager.getOWLDataFactory();
                property = factory.getOWLObjectProperty(PropURI);
                {if (true) {
                    return property;
                }}
    throw new Error("Missing return statement in function");
  }

  final public OWLClass getClassByLabel(OWLOntology ontology, String label) throws ParseException {
        OWLAnnotationProperty rdfslabel = ontology.getOWLOntologyManager()
                .getOWLDataFactory().getRDFSLabel();
        OWLClass resultclass = null;
        for (OWLClass cls : ontology.getClassesInSignature()) {
            String finalLabel = null;
            for (OWLAnnotation annotAxiom : EntitySearcher.getAnnotations(
                    cls.getIRI(), ontology, rdfslabel)) {
                String wholeLabel = annotAxiom.getValue().toString();
                if (wholeLabel.contains("@")) {
                    finalLabel = wholeLabel.split("@")[0];
                } else if (wholeLabel.contains("^^")) {
                    finalLabel = wholeLabel.split("\"")[1];
                } else {
                    finalLabel = wholeLabel;
                }
            }
            if (finalLabel != null && label != null) {
                if (finalLabel.equals(label)) {
                    resultclass = cls;
                }
            }
        }


    {if (true) {
        return resultclass;
    }}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_3R_14() {
    if (jj_3R_3()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_6()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_5()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
        return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_12()) {
        return true;
    }
    if (jj_scan_token(ALL)) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(LeftPar)) {
        return true;
    }
    if (jj_3R_13()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(OR)) {
        return true;
    }
    if (jj_3R_4()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(OWLNamedObject)) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
        return true;
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_9()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_8()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_11()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_4()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_10()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
        return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(NOT)) {
        return true;
    }
    if (jj_3R_7()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(OWLLABELNamedObject)) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OWLNamedObject)) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_12()) {
        return true;
    }
    if (jj_scan_token(SOME)) {
        return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(AND)) {
        return true;
    }
    if (jj_3R_3()) {
        return true;
    }
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
        return true;
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_7()) {
        return true;
    }
    return false;
  }

  public OPLSelectParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public OPLSelectParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public OPLSelectParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OPLSelectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public OPLSelectParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OPLSelectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public OPLSelectParser(OPLSelectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  public void ReInit(OPLSelectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) {
        token = token.next;
    } else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) {
                c.first = null;
            }
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) {
        jj_add_error_token(kind, i);
    }
    }
    if (jj_scanpos.kind != kind) {
        return true;
    }
    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
        throw jj_ls;
    }
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) {
        token = token.next;
    } else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) {
        t = t.next;
    } else {
        t = t.next = token_source.getNextToken();
    }
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null) {
        return jj_ntk = (token.next=token_source.getNextToken()).kind;
    } else {
        return jj_ntk = jj_nt.kind;
    }
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
        return;
    }
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])e.nextElement();
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) {
            break;
        }
        }
      }
      if (!exists) {
        jj_expentries.addElement(jj_expentry);
    }
      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & 1<<j) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & 1<<j) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
