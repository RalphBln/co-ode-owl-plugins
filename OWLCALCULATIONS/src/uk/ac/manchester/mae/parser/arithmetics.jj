/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. arithmetics.jj */
/*@egen*//**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
                 
               
                      
                                        
    DEBUG_TOKEN_MANAGER=false;
}
 
PARSER_BEGIN(ArithmeticsParser) 
package uk.ac.manchester.mae;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.protege.editor.owl.model.OWLModelManager;
import org.semanticweb.owl.model.OWLDataProperty;
import org.semanticweb.owl.expression.OWLEntityChecker;
import org.semanticweb.owl.model.OWLObjectProperty;
import org.coode.manchesterowlsyntax.ManchesterOWLSyntaxEditorParser;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.expression.ParserException;
import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.model.OWLObject;
import org.protege.editor.owl.ui.clsdescriptioneditor.AutoCompleterMatcher;

public class ArithmeticsParser/*@bgen(jjtree)*/implements ArithmeticsParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTArithmeticsParserState jjtree = new JJTArithmeticsParserState();

/*@egen*/
	
	static private OWLEntityChecker owlEntityChecker = null;
	
	static private AutoCompleterMatcher matcher;
	
	static private OWLDataFactory dataFactory = OWLManager.createOWLOntologyManager().getOWLDataFactory();
	
	static public void setOWLDataFactory(OWLDataFactory dataFactory){
		ArithmeticsParser.dataFactory = dataFactory;
	}
	
	static{
		
		initCompletions();
	}
	static public void setOWLEntityChecker(OWLEntityChecker owlEntityChecker){
		ArithmeticsParser.owlEntityChecker = owlEntityChecker;
	}
	
	static public void setAutoCompleterMatcher(AutoCompleterMatcher matcher){
		ArithmeticsParser.matcher = matcher;
	}
	
	// Unchecked on purpose as it must contain both OWLObject instances and String
	private static List completions;
	
	public static List getCompletions(){
		return completions;
	}	
	
	private static void initCompletions(){
		if(completions ==null){
        			completions = new ArrayList();
        }
		completions.clear();
		completions.add("$");
		completions.add("APPLIESTO <");
		completions.add("STORETO <");
		completions.add("{");
	}
	
	private static void initCompletions(boolean conflictExpressed,
								 boolean appliesToExpressed, 
								 boolean storeToExpressed,
								 boolean bindingExpressed){
		initCompletions();
		if(conflictExpressed){
				completions.remove("$");
		}
		if(appliesToExpressed){
			completions.remove("$");
			completions.remove("APPLIESTO <");
		}
		if(storeToExpressed){
			completions.remove("$");
			completions.remove("APPLIESTO <");
			completions.remove("STORETO <");
		}
		if(bindingExpressed){
			completions.remove("$");
			completions.remove("APPLIESTO <");
			completions.remove("STORETO <");
			completions.remove("{");
		}
		
	}
	
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new ArithmeticsParser(System.in);
    try {
      SimpleNode n = ArithmeticsParser.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(ArithmeticsParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: /*DELIMITERS*/
{
	<BINDINGEND: "}->">
	|<OPENCURLYBRACKET: "{">
	| <CLOSEDCURLYBRACKET: "}">
	| <EXCLAMATION: "!">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN: /*Strategies*/
{
	<STRATEGY: "OVERRIDING" | "OVERRIDDEN" | "EXCEPTION">
}

TOKEN:{
	<NUMBER : <INTEGER_LITERAL> (<URISYMBOLS> <INTEGER_LITERAL>)?>
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
 
 | <URISYMBOLS: ":" | "." | "#" | "~">

  
}

TOKEN : /* OPERATORS */
{
	
	<SUM: ("+"|"-")>
	|<MULTIPLY: ( "*" | "/" | "%" )>
}




SimpleNode Start() : {/*@bgen(jjtree) Start */
                      MAEStart jjtn000 = new MAEStart(JJTSTART);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Set<String> variables = new HashSet<String>();
								 boolean conflictExpressed = false;
								 boolean appliesToExpressed = false; 
								 boolean storeToExpressed = false;
								 boolean bindingExpressed = false;}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/

  (ConflictStrategy()
  {
  	conflictExpressed = true;
  }
  )?
  {
	initCompletions(conflictExpressed, appliesToExpressed, storeToExpressed, bindingExpressed);
  }
  (AppliesTo()
  {
  	appliesToExpressed = true;
  }
  )?
  {
	initCompletions(conflictExpressed, appliesToExpressed, storeToExpressed, bindingExpressed);
  }
  (StoreTo()
  	{
  	 storeToExpressed = true;
  	}
  )?
  {
	initCompletions(conflictExpressed, appliesToExpressed, storeToExpressed, bindingExpressed);
  }
  ("{"
  {
  	initCompletions(conflictExpressed, appliesToExpressed, storeToExpressed, bindingExpressed);
  }
  Binding(variables) 
  {
  	bindingExpressed = true;
  	completions.addAll(variables);
  }   
  ("," Binding(variables)
  	{
  		completions.addAll(variables);
  	}
  )* "}->")?
   
  (Expression(variables) | Function(variables)) ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { 	
  	return jjtn000; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ConflictStrategy():{/*@bgen(jjtree) ConflictStrategy */
                         MAEConflictStrategy jjtn000 = new MAEConflictStrategy(JJTCONFLICTSTRATEGY);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConflictStrategy */
         try {
/*@egen*/
	 "$" {
	  		completions.clear();
            completions.add("$OVERRIDING$");
            completions.add("$OVERRIDDEN$");
            completions.add("$EXCEPTION$");
	 }
	 t = <STRATEGY>{
	 	jjtn000.setStrategyName(t.image);
	 }
	"$"/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void StoreTo():{/*@bgen(jjtree) StoreTo */
  MAEStoreTo jjtn000 = new MAEStoreTo(JJTSTORETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StoreTo */
        try {
/*@egen*/
	"STORETO <"
	{ 
		completions.clear();
	}
	 PropertyChain() ">"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AppliesTo()       :{}
{
	"APPLIESTO <"
	{ 
		completions.clear();
	}
		 manSyntaxClassExpression() ">"
}


JAVACODE

	 void manSyntaxClassExpression(){/*@bgen(jjtree) manSyntaxClassExpression */
             MAEmanSyntaxClassExpression jjtn000 = new MAEmanSyntaxClassExpression(JJTMANSYNTAXCLASSEXPRESSION);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {
/*@egen*/
		Token t;
		while(true){
			t = getToken(1);
			if (t.image.equals(">") || t.image.equals("]") || t.kind == EOF){
				break;
			}else{
				jjtn000.setContent(jjtn000.getContent()+(jjtn000.getContent().equals("")?"":" ")+t.image);
				t = getNextToken();
			}
		}
		String content = jjtn000.getContent();
		ManchesterOWLSyntaxEditorParser parser = new ManchesterOWLSyntaxEditorParser(dataFactory,content);
        parser.setOWLEntityChecker(owlEntityChecker);
        
        try {
        	parser.parseDescription();
        	
        }catch(ParserException e){
        	if(matcher!=null){
				
				int lastIndexOfWhiteSpace = content.lastIndexOf(" ");
				String word = lastIndexOfWhiteSpace == -1 ? content
						: content.substring(lastIndexOfWhiteSpace).trim();
				Set<OWLObject> matches = matcher
						.getMatches(word, e.isClassNameExpected(), e
								.isObjectPropertyNameExpected(), e
								.isDataPropertyNameExpected(), e
								.isIndividualNameExpected(), e
								.isDatatypeNameExpected());
				List kwMatches = new ArrayList(matches.size() + 10);
				for (String s : e.getExpectedKeywords()) {
					if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
						kwMatches.add(s);
					}
				}
				completions.addAll(kwMatches);
				completions.addAll(matches);
				}
        	throw new ParseException(e.getMessage());
        	
        }
        String expression = content+"**";	
        ManchesterOWLSyntaxEditorParser completerParser = new ManchesterOWLSyntaxEditorParser(dataFactory,expression);
        completerParser.setOWLEntityChecker(owlEntityChecker);
        try{
        	
        	completerParser.parseDescription();
		} catch (ParserException e) {
				if(matcher!=null){
				
				int lastIndexOfWhiteSpace = expression.lastIndexOf(" ");
				String word = lastIndexOfWhiteSpace == -1 ? ""
						: content.substring(lastIndexOfWhiteSpace).trim();
				
				List kwMatches = new ArrayList(10);
				for (String s : e.getExpectedKeywords()) {
					if (word.matches("(\\s)*") || s.toLowerCase().startsWith(word.toLowerCase())) {
						kwMatches.add(s);
					}
				}
				completions.addAll(kwMatches);
				
				}
			
		}/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/
		
		
       
	}


void Binding(Set<String> variables):{/*@bgen(jjtree) Binding */
                                     MAEBinding jjtn000 = new MAEBinding(JJTBINDING);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token identifier; Token propertyName;}
{/*@bgen(jjtree) Binding */
        try {
/*@egen*/
	identifier=<IDENTIFIER>
	{
		variables.add(identifier.image);
		jjtn000.setIdentifier(identifier.image);
	}
	"=" PropertyChain()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PropertyChain(): {/*@bgen(jjtree) PropertyChain */
                       MAEPropertyChain jjtn000 = new MAEPropertyChain(JJTPROPERTYCHAIN);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/String propertyName; Token index;}
{/*@bgen(jjtree) PropertyChain */
        try {
/*@egen*/

	propertyName= PropertyURI(){
		jjtn000.setPropertyName(propertyName);
	}
	("[" PropertyFacet()
	
	"]")? (<EXCLAMATION> {
		jjtn000.setEnd(false);
	}
		  (PropertyChain()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PropertyFacet():{/*@bgen(jjtree) PropertyFacet */
  MAEPropertyFacet jjtn000 = new MAEPropertyFacet(JJTPROPERTYFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyFacet */
        try {
/*@egen*/
	manSyntaxClassExpression()/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


JAVACODE

String PropertyURI()      {
		String toReturn = null;
		String uriString = "";
		Token t;
		while (true) {
			t = getToken(1);
			if (t.kind == EXCLAMATION || t.image.startsWith("[")
					|| t.kind == CLOSEDCURLYBRACKET || t.kind == BINDINGEND || t.image.startsWith("{") || t.image.startsWith(">") || t.kind==EOF) {
				break;
			}
			uriString = (uriString + t.image).trim();
			t = getNextToken();
		}
		if (owlEntityChecker != null) {
			OWLDataProperty dataProperty = owlEntityChecker
					.getOWLDataProperty(uriString);
			if (dataProperty != null) {
				toReturn = dataProperty.getURI().toString();
			}
			if(toReturn ==null){
				OWLObjectProperty objectProperty = owlEntityChecker
						.getOWLObjectProperty(uriString);
				if (objectProperty != null) {
					toReturn = objectProperty.getURI().toString();
				}
			}
		}
		if (toReturn == null) {
			if(matcher !=null){
            	completions.addAll(matcher.getMatches(uriString, false, true, true, false, false));
            }
			throw new ParseException(uriString + " invalid property URI or name");
			
		}
		if(matcher !=null){
			completions.addAll(matcher.getMatches(uriString, false, true, true, false, false));
		}
		return toReturn;
} 

void Expression(Set<String> variables)       : {}
{

  AdditiveExpression(variables) 
  
}

void AdditiveExpression(Set<String> variables)       : {Token op =null;}
{/*@bgen(jjtree) #Add(> 1) */
  {
    MAEAdd jjtn001 = new MAEAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
	
  (
  	 MultiplicativeExpression(variables) (  op=<SUM> {
    	jjtn001.setSum(op == null || op.image.compareTo("+")==0);
    	
    } AdditiveExpression(variables) )*
    
    
    
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         
}

void MultiplicativeExpression(Set<String> variables)       : {Token op =null;}
{/*@bgen(jjtree) #Mult(> 1) */
  {
    MAEMult jjtn001 = new MAEMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpression(variables) ( op =<MULTIPLY> { 
     jjtn001.setMultiplication(op == null || op.image.compareTo("*")==0);
     jjtn001.setPercentage(op != null && op.image.compareTo("%")==0);
    }
    MultiplicativeExpression(variables) )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/          
}

void UnaryExpression(Set<String> variables)       : {}
{
	LOOKAHEAD(2)
	Power(variables)	
  |"(" Expression(variables) ")"  
  |  groundTerm(variables)
}

void Power(Set<String> variables) :{/*@bgen(jjtree) Power */
                                    MAEPower jjtn000 = new MAEPower(JJTPOWER);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Double base=null; Double exp; Token baseId=null;}
{/*@bgen(jjtree) Power */
        try {
/*@egen*/
	(
		((base = Integer()) | baseId =<IDENTIFIER>{
			if(!variables.contains(baseId.image)){
				throw new ParseException("Unbound symbol: "+baseId.image);
			}
		}
		) "^" exp = Integer()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			if(base!=null){
				jjtn000.setBase(base);
			}else{
				jjtn000.setSymbolic(true);
				jjtn000.setBaseIdentifier(baseId.image);
			}
			jjtn000.setExp(exp);
		}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


double Integer()          :{/*@bgen(jjtree) IntNode */
                            MAEIntNode jjtn000 = new MAEIntNode(JJTINTNODE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) IntNode */
try {
/*@egen*/
	
t = <NUMBER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/ 
{
  	jjtn000.setValue(Double.parseDouble(t.image));
  	jjtn000.setSymbolic(false);
  	return jjtn000.getValue();
  	}
| t= <INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	jjtn000.setValue(Double.parseDouble(t.image));
  	jjtn000.setSymbolic(false);
  	return jjtn000.getValue();
  	}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}




void Identifier(Set<String> variables)            : {/*@bgen(jjtree) Identifier */
                                                     MAEIdentifier jjtn000 = new MAEIdentifier(JJTIDENTIFIER);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		if(!variables.contains(t.image)){
			throw new ParseException("Unbound symbol: "+t.image);
		}
		jjtn000.setIdentifierName(t.image);
		jjtn000.setSymbolic(true);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void groundTerm(Set<String> variables)      : {}
{
	(Integer() |  Identifier(variables) ) 
}

void Function(Set<String> variables)      :{}
{  
	
	BigSum(variables)
}

void BigSum(Set<String> variables) :{/*@bgen(jjtree) BigSum */
  MAEBigSum jjtn000 = new MAEBigSum(JJTBIGSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BigSum */
        try {
/*@egen*/
	
	("SUM("|"sum(")  Expression(variables)")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}