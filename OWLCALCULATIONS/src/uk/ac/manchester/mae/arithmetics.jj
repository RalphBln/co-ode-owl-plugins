/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ../../mae/arithmetics.jj */
/*@egen*//**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";                                                                                                                                          
    DEBUG_TOKEN_MANAGER=false;
}
 
PARSER_BEGIN(ArithmeticsParser) 
package uk.ac.manchester.mae;

import java.net.URI;
import java.net.URISyntaxException;

public class ArithmeticsParser/*@bgen(jjtree)*/implements ArithmeticsParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTArithmeticsParserState jjtree = new JJTArithmeticsParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new ArithmeticsParser(System.in);
    try {
      SimpleNode n = ArithmeticsParser.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(ArithmeticsParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN:{
	<NUMBER : <INTEGER_LITERAL> (<URISYMBOLS> <INTEGER_LITERAL>)?>
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
 
 | <URISYMBOLS: ":" | "." | "#">

  
}

TOKEN : /* OPERATORS */
{
	
	<SUM: ("+"|"-")>
	|<MULTIPLY: ( "*" | "/" | "%" )>
}

TOKEN: /*Strategies*/
{
	<STRATEGY: ("OVERRIDING" | "OVERRIDDEN" | "EXCEPTION")>
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  MAEStart jjtn000 = new MAEStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
	
  (ConflictStrategy())?(AppliesTo())?("{"Binding() ("," Binding())* "}->")*  (Expression() | Function()) ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ConflictStrategy():{/*@bgen(jjtree) ConflictStrategy */
                         MAEConflictStrategy jjtn000 = new MAEConflictStrategy(JJTCONFLICTSTRATEGY);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConflictStrategy */
         try {
/*@egen*/
	 "$"t = <IDENTIFIER>
	{
		jjtn000.setStrategyName(t.image);
	}"$"/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}



void AppliesTo()       :{}
{
	"APPLIESTO <" manSyntaxClassExpression() ">"
}


JAVACODE

	 void manSyntaxClassExpression(){/*@bgen(jjtree) manSyntaxClassExpression */
             MAEmanSyntaxClassExpression jjtn000 = new MAEmanSyntaxClassExpression(JJTMANSYNTAXCLASSEXPRESSION);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {
/*@egen*/
		Token t;
		while(true){
			t = getToken(1);
			if (t.image.equals(">")){
				break;
			}else{
				jjtn000.setContent(jjtn000.getContent()+(jjtn000.getContent().equals("")?"":" ")+t.image);
				t = getNextToken();
			}
		}/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
/*@egen*/
	}


void Binding():{/*@bgen(jjtree) Binding */
                MAEBinding jjtn000 = new MAEBinding(JJTBINDING);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token identifier; Token propertyName;}
{/*@bgen(jjtree) Binding */
        try {
/*@egen*/
	identifier=<IDENTIFIER>
	{
		jjtn000.setIdentifier(identifier.image);
	}
	"=" PropertyChain()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PropertyChain(): {/*@bgen(jjtree) PropertyChain */
                       MAEPropertyChain jjtn000 = new MAEPropertyChain(JJTPROPERTYCHAIN);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/String propertyName; Token index;}
{/*@bgen(jjtree) PropertyChain */
        try {
/*@egen*/

	propertyName= PropertyURI(){
		jjtn000.setPropertyName(propertyName);
	}
	("[" index = <INTEGER_LITERAL>{
		jjtn000.setIndex(Integer.parseInt(index.image));
	}
	"]")? ("!" {
		jjtn000.setEnd(false);
	}
		  (PropertyChain()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

JAVACODE

String PropertyURI()      {
	String toReturn;
	String uriString="";
	Token t;
	while(true){
		t= getToken(1);
		if(t.image.startsWith("!") || t.image.startsWith("[") || t.image.startsWith("}")){
			break;
		}
		uriString = (uriString+t.image).trim();
		t=getNextToken();
		
	}
	try{
		toReturn = new URI(uriString.trim()).toString();
	}catch(URISyntaxException e){
		throw new ParseException(uriString + " " +e.getMessage());
	}
	return toReturn;
} 

void Expression()       : {}
{
  AdditiveExpression() 
  
}

void AdditiveExpression()       : {Token op =null;}
{/*@bgen(jjtree) #Add(> 1) */
  {
    MAEAdd jjtn001 = new MAEAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
	
  (
  	 MultiplicativeExpression() (  op=<SUM> {
    	jjtn001.setIsSum(op == null || op.image.compareTo("+")==0);
    	
    } AdditiveExpression() )*
    
    
    
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void MultiplicativeExpression()       : {Token op =null;}
{/*@bgen(jjtree) #Mult(> 1) */
  {
    MAEMult jjtn001 = new MAEMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpression() ( op =<MULTIPLY> { 
     jjtn001.setIsMultiplication(op == null || op.image.compareTo("*")==0);
     jjtn001.setIsPercentage(op != null && op.image.compareTo("%")==0);
    }
    MultiplicativeExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryExpression()       : {}
{
	LOOKAHEAD(2)
	Power()	
  |"(" Expression() ")"  
  |  groundTerm()
}

void Power() :{/*@bgen(jjtree) Power */
               MAEPower jjtn000 = new MAEPower(JJTPOWER);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Double base=null; Token exp; Token baseId=null;}
{/*@bgen(jjtree) Power */
        try {
/*@egen*/
	(
		((base = Integer()) | baseId =<IDENTIFIER>) "^" exp = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
			if(base!=null){
				jjtn000.setBase(base);
			}else{
				jjtn000.setSymbolic(true);
				jjtn000.setBaseIdentifier(baseId.image);
			}
			jjtn000.setExp(Double.parseDouble(exp.image));
		}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


double Integer()          :{/*@bgen(jjtree) IntNode */
                            MAEIntNode jjtn000 = new MAEIntNode(JJTINTNODE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) IntNode */
try {
/*@egen*/
	
t = <NUMBER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/ 
{
  	jjtn000.setValue(Double.parseDouble(t.image));
  	jjtn000.setSymbolic(false);
  	return jjtn000.getValue();
  	}
| t= <INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	jjtn000.setValue(Double.parseDouble(t.image));
  	jjtn000.setSymbolic(false);
  	return jjtn000.getValue();
  	}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}




void Identifier()            : {/*@bgen(jjtree) Identifier */
                                MAEIdentifier jjtn000 = new MAEIdentifier(JJTIDENTIFIER);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		jjtn000.setIdentifierName(t.image);
		jjtn000.setSymbolic(true);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void groundTerm()      : {}
{
	(Integer() |  Identifier() ) 
}

void Function()      :{}
{
	BigSum()
}

void BigSum() :{/*@bgen(jjtree) BigSum */
  MAEBigSum jjtn000 = new MAEBigSum(JJTBIGSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BigSum */
        try {
/*@egen*/
	
	("SUM("|"sum(")  Expression()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}