/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=MAE,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package uk.ac.manchester.mae.parser;

@SuppressWarnings("all")
public abstract class SimpleNode implements Node {

    protected Node parent;
    protected Node[] children;
    protected int id;
    protected ArithmeticsParser parser;
    protected boolean isSymbolic;

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(ArithmeticsParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {}

    public void jjtClose() {}

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return children == null ? 0 : children.length;
    }

    /** Accept the visitor. */
    public abstract Object jjtAccept(ArithmeticsParserVisitor visitor,
            Object data);

    // {
    // return visitor.visit(this, data);
    // }
    /** Accept the visitor. */
    public Object childrenAccept(ArithmeticsParserVisitor visitor,
            Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                children[i].jjtAccept(visitor, data);
            }
        }
        return data;
    }

    /*
     * You can override these two methods in subclasses of SimpleNode to
     * customize the way the node appears when the tree is dumped. If your
     * output uses more than one line you should override toString(String),
     * otherwise overriding toString() is probably all you need to do.
     */
    @Override
    public String toString() {
        return ArithmeticsParserTreeConstants.jjtNodeName[id];
    }

    public String toString(String prefix) {
        return prefix + this.toString();
    }

    /*
     * Override this method if you want to customize how the node dumps out its
     * children.
     */
    public void dump(String prefix) {
        System.out.println(this.toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public boolean isSymbolic() {
        return isSymbolic;
    }

    public void setSymbolic(boolean isSymbolic) {
        this.isSymbolic = isSymbolic;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        return this.toString().equals(obj.toString());
    }

    @Override
    public int hashCode() {
        return this.toString().hashCode();
    }
}
/*
 * JavaCC - OriginalChecksum=a423f48b9841f08701e8684b47ef468a (do not edit this
 * line)
 */
