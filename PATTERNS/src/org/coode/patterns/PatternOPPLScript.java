/**
 * Copyright (C) 2008, University of Manchester
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.coode.patterns;

import java.net.URI;
import java.util.List;
import java.util.Set;

import org.coode.oppl.OPPLScript;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLObject;
import org.semanticweb.owl.model.OWLOntology;

/**
 * Interface that abstracts the commonalities between different parsed Pattenr
 * related entities: namely PatternModel instances and InstantiatedPatternModel
 * ones
 * 
 * @author Luigi Iannone
 * 
 *         Sep 25, 2008
 */
public interface PatternOPPLScript extends OPPLScript {
	/**
	 * @return the name for this PatternOPPLScript
	 */
	public String getName();

	/**
	 * Adds a dependency from this Script to towards the input one
	 * 
	 * @param script
	 */
	void addDependency(PatternOPPLScript script);

	/**
	 * @return true if this PatternOPPLScript depends on the input one, false
	 *         otherwise
	 */
	boolean dependsOn(PatternOPPLScript aPatternOPPLScript);

	void setUnresolvedOPPLStatement(String s);

	/**
	 * @return the pattern URI
	 */
	URI getUri();

	/**
	 * Sets the pattern URI
	 * 
	 * @param anURI
	 */
	void setUri(URI anURI);

	/**
	 * @return true if this pattern script can be applied to an OWLClass
	 */
	boolean isClassPattern();

	String getDefinitorialPortionStrings(List<List<Object>> replacements)
			throws PatternException;

	/**
	 * @param replacementTuples
	 * @return the List of OWLObject elements that correspond to the
	 *         definitorial portions of the patter once the replacement are
	 *         considered
	 * @throws PatternException
	 */
	public List<OWLObject> getDefinitorialPortions(
			List<List<Object>> replacementTuples) throws PatternException;

	String getRendering();

	/**
	 * @return true is any of the variables used in this PatternOPPLScript is
	 *         scoped, false otherwise
	 */
	boolean hasScopedVariables();

	/**
	 * 
	 * 
	 * @param ontology
	 * 
	 * @return the Set containing the OWLAxiom elements generated by the
	 *         serialisation of this OPPScript
	 * 
	 * 
	 */
	public Set<? extends OWLAxiom> getOWLAxioms(OWLOntology ontology);
}
