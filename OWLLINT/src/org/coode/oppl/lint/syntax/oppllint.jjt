/**
* JJTree file
*/

options {
 	JDK_VERSION = "1.5";
 	MULTI=false;
    NODE_PREFIX="OPPLLint";
}
 
PARSER_BEGIN(OPPLLintParser) 
package org.coode.oppl.lint.syntax;

import org.coode.oppl.OPPLScript;
import org.coode.oppl.syntax.OPPLParser;
import org.coode.oppl.lint.OPPLLintScript;
import org.coode.oppl.lint.OPPLLintAbstractFactory;
import org.coode.oppl.variablemansyntax.Variable;

public class OPPLLintParser {
	private static OPPLLintAbstractFactory opplLintAbstractFactory;
	public static OPPLLintAbstractFactory getOPPLLintAbstractFactory(){
		return opplLintAbstractFactory;
	}

	public static void setOPPLLintAbstractFactory(OPPLLintAbstractFactory factory){
		 opplLintAbstractFactory= factory;
	}
}
PARSER_END(OPPLLintParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: "?"<LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["-","_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}


TOKEN: /*CONSTRAINTS OPERATORS */
{
	<NEQ: "!=">
}

TOKEN : /* PUNCTUATION */
{
	<SEMICOLON: ";">
	| <COLON: ":">
	| <COMMA: ",">
	| <EXCLAMATION: "!">
	| <DOT: ".">
}

TOKEN : /* RETURN */
{
	<RETURN: "RETURN">
}

TOKEN :
{
	<WORD: <LETTER> (<LETTER>|<DIGIT>)* >

}


OPPLLintScript Start():{OPPLScript opplScript=null; Token variableNameToken;String name; String description;}
{
  name = opplName()<SEMICOLON>opplScript = OPPLStatement() <SEMICOLON><RETURN> variableNameToken = <IDENTIFIER><SEMICOLON> description = opplLintDescription()
  { 
  	String variableName = variableNameToken.image;
  	Variable v = opplScript.getConstraintSystem().getVariable(variableName);
  	if(v!=null){
  		return getOPPLLintAbstractFactory().buildOPPLLintScript(name, opplScript,v, description);
  	}else{
  		throw new ParseException("Invalid variable name "+variableNameToken.image);
  	} 
  }
}

JAVACODE
OPPLScript OPPLStatement()
{
	String opplScriptString = Utils.readString(SEMICOLON);
	try{
		if(!opplScriptString.endsWith(";")){
			opplScriptString = opplScriptString+";";
		}
		getOPPLLintAbstractFactory().initOPPLParser(opplScriptString);
		OPPLScript toReturn = OPPLParser.Start();
		if(toReturn.getQuery()!=null){
			return toReturn;
		}else{
			throw new ParseException("OPPL Lint must have a query section");
		}
	} catch (Exception e) {
		throw new ParseException(e.getMessage());
	}
}

JAVACODE
String opplName()
{
	return Utils.readString(SEMICOLON);
}

JAVACODE
String opplLintDescription()
{
	return Utils.readString(EOF);
}

